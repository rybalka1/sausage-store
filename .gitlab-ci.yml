stages:
  - build
  - test-sonar
  - test
  - release
  - notification
include:
  - template: Security/SAST.gitlab-ci.yml
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

build-code-job: # задача с именем build-code-job
  stage: build # этап build
  script: # объявление скрипта
    - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt # сохранение номера задачи в файл, чтобы в дальнейшем использовать для копирования артефакта
    - cd backend
    - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository # запуск сборки кода
    - cd ../frontend
    - npm install # загрузка всех сторонних зависимостей
    - npm run build # запуск сборки кода
    - cd ..
    - mkdir sausage-store-${VERSION} # создание директории, в которую копируются артефакты. Это нужно для организации удобной структуры архива
    - cp backend/target/sausage-store-${VERSION}.jar backend/sausage-store-${VERSION}.jar # копирование собранного фронтэнда
    - mv backend/target/sausage-store-${VERSION}.jar sausage-store-${VERSION}/sausage-store-${VERSION}.jar # копирование собранного бэкенда
    - mv frontend/dist/frontend sausage-store-${VERSION}/public_html
  artifacts:
    paths:
      - sausage-store-${VERSION}/public_html # сохранение собранного фронтэнда как артефакт
      - sausage-store-${VERSION}/sausage-store-${VERSION}.jar # сохранение собранного бэкенда как артефакт
      - backend/sausage-store-${VERSION}.jar
      - ${CI_PROJECT_DIR}/.m2/ # сохранение зависимостей для SAST
    reports:
      dotenv: CI_JOB_ID.txt # сохранение файла с переменными как артефакт

spotbugs-sast:
  variables:
    COMPILE: "false"
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

sonarqube-frontend:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    SONAR_HOST_URL: "${SONAR_HOST_URL}"
    SONAR_TOKEN: "${SONAR_TOKEN}"
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  stage: test-sonar
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd frontend
    - sonar-scanner -Dsonar.projectKey=01_rybalka_dmitrii_frontend -Dsonar.sources=. -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_TOKEN}
  allow_failure: true

sonarqube-backend:
  image:
    name: maven:3.8-openjdk-16
  variables:
    SONAR_HOST_URL: "${SONAR_HOST_URL}"
    SONAR_TOKEN: "${SONAR_TOKEN}"
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  stage: test-sonar
  script:
    - cd backend
    - mvn -X verify sonar:sonar -Dsonar.projectKey=01_rybalka_dmitrii_backend
  allow_failure: true

upload-release-backend: # задача с именем upload-release
  stage: release # этап release
  script:
    - cd backend
    - mvn -s settings.xml deploy -DskipTests -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository

upload-release-frontend: # задача с именем upload-release
  stage: release # этап release
  #only: # запуск этого шага только при изменениях в директориях backend и frontend
  #  changes:
  #    - backend//*
  #    - frontend//*
  script:
    - tar czvf sausage-store-${VERSION}.tar.gz sausage-store-${VERSION}
    - >
      curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_REPO_URL}/repository/sausage-store-rybalka-dmitrii-frontend/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz

send-message-to-slack:
  stage: notification
  script:
    - echo "Send to slack message"
    - >
      curl -X POST -H 'Content-type: application/json' --data '{"text":"Вышла новая версия сосисочной — '${VERSION}'.\nСкачать фронт можно по ссылке — '${NEXUS_REPO_URL}'/repository/sausage-store-rybalka-dmitrii-frontend.\nСкачать бэкенд можно по ссылке — '${NEXUS_REPO_URL}'/repository/sausage-store-rybalka-dmitrii-backend"}' ${SLACK_URL}
