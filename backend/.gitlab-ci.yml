
stages:
  - build-jar
  - build-docker
  - test-sonar
  - test
  - release
  - notification
  - deploy
include:
  - template: Security/SAST.gitlab-ci.yml
  - project: "templates/ci"
    file: "DockerInDockerTemplate.yml"
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ./.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90

build-jar:
  stage: build-jar
  script:
    - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt
    - cd ${CI_PROJECT_DIR}/backend
    - mvn -X package -Dversion.application=${VERSION} -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository
    - mkdir ${CI_PROJECT_DIR}/sausage-store-${VERSION}
    - cp ${CI_PROJECT_DIR}/backend/target/sausage-store-${VERSION}.jar ${CI_PROJECT_DIR}/backend/sausage-store-${VERSION}.jar
    - mv ${CI_PROJECT_DIR}/backend/target/sausage-store-${VERSION}.jar ${CI_PROJECT_DIR}/sausage-store-${VERSION}/sausage-store-${VERSION}.jar
  artifacts:
    paths:
      - sausage-store-${VERSION}/sausage-store-${VERSION}.jar
      - backend/sausage-store-${VERSION}.jar
      - ${CI_PROJECT_DIR}/.m2/
    reports:
      dotenv: CI_JOB_ID.txt
  # rules:
  #   - changes:
  #     - backend/*

spotbugs-sast:
  variables:
    COMPILE: "false"
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

sonarqube-backend:
  stage: test-sonar
  image:
    name: maven:3.8-openjdk-16
  variables:
    SONAR_HOST_URL: "${SONAR_HOST_URL}"
    SONAR_TOKEN: "${SONAR_TOKEN}"
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  script:
    - cd backend
    - mvn -X verify sonar:sonar -Dsonar.projectKey=01_rybalka_dmitrii_backend
  allow_failure: true

build-backend:
  stage: build-docker
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - mv ./sausage-store-${VERSION}/sausage-store-${VERSION}.jar ./backend/sausage-store.jar
    - cd backend
    - ls -la
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend:$VERSION
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:$VERSION
  dependencies:
    - build-jar

# send-message-to-slack:
#   stage: notification
#   variables:
#     GIT_STRATEGY: none
#   dependencies: []
#   script:
#     - echo "Send to slack message"
#     - >
#       curl -X POST -H 'Content-type: application/json' --data '{"text":"Вышла новая версия сосисочной — '${VERSION}'\nСкачать бэкенд можно по ссылке — '${NEXUS_REPO_URL}'/repository/sausage-store-rybalka-dmitrii-backend/com/yandex/practicum/devops/sausage-store/'${VERSION}'/sausage-store-'${VERSION}'.jar"}' ${SLACK_URL}

upload-backend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend:${VERSION}
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend:${VERSION} $CI_REGISTRY_IMAGE/sausage-backend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:latest
