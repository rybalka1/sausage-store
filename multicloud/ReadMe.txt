Схема1
Схемы резервирования с типом соединения звезда между сервисами не рассматривается, так как считается что 
работоспособность обеспечивается средствами кубера (HPA, VPA), DB в кластере, есть снапшоты, бэкапы.

Облако 1 - Россия
Облако 2 - Европа

Ingress nginx, фронт сервер размещен только в России, как и S3 бакет для 
статики(для нашего приложения подключение CDN провайдера не имеет большого смысла, 
но при увеличении кол-ва статик контента и его размеров, может быть подклчен с покрытием 
на обе территории). На ингресс используется сборка нджинкс + MaxMind GeoDB.
Позволит настройками нджинкс направлять запросы на "ближайший" к пользователю бэкенд.

Так как магазин продуктовый, то наличие товара на складах явно имеют территориальный признак, 
плюс разные ценовые политики. По этому постгресс базы каждая в своем облаке, 
дополнительно, это же обусловленно тем что запросы в БД часто бывают наиболее затратными 
по времени обработки и из-за этого и проще иметь рядом с бэкендами 
на гаратнтированных и широких каналах связи.

Базы монго так же в каждом облаке, связанно с следующими факторами:
1. "широкие" каналы связи
2. требования по хранению перс данных пользователей (152-ФЗ Россия, GDPR - Европа)
Реплика из Европы в Россию только в рамках отчетов по продажам, для работы с этими данными.


Плюсы
1. экономия на аренде мощностей
2. отличие в коде продукта для разных облаков минимальны - только адреса баз данных.

Минусы
1.Прохождени трафика из Европы с увеличенным кол-во хопов, может сказаться на скорости работы 
и стабильности (запрос идет в Россию, потом из России в Европу на бэки, 
возврат от бэков в Россию и опять в Европу)
2. Необходимость публикации бэка на "белом" ip (можно невилировать 
настройкой фаерволла, на прием трафика только с адресов нджинкс)

Схема 2
Облако 1 - Россия
Облако 2 - Европа

Расположение DB, обусловленно тем же факторами, что и для схемы1.
Фактически оба облака полностью дублируют друг друга и 
являются развязанными автономными системами.
Роутинг между облаками осуществляется на основе сервисов типа GEODNS\Route53, 
распределяя запросы пользователей на "ближайшее"  к ним облако.

Плюсы
1. Наименьшее "расстояние" до пользователя, более высокая и стабильная работа 
с точки зрения пользователя, сервиса.
2. Схожесть схем организации обоих облаков

Минусы
1. Более дорогое решение по сравнению с схемой 1
2. требует больше изменений в коде продукта, кроме разных адресов баз данных, 
так же другие урл для статик файлов.  
